#include <stdio.h>

#define MAX 100 // Maximum possible number of rows and columns in the sparse matrix

// Function to convert sparse matrix to triplet form
void compact(int A[][MAX], int m, int n, int B[][3]) {
    int i, j, k = 1;

    // Step 1: Store the number of rows and columns of the original matrix
    B[0][0] = m;
    B[0][1] = n;

    // Step 2: Traverse the sparse matrix and record non-zero elements
    for (i = 0; i < m; i++) {
        for (j = 0; j < n; j++) {
            if (A[i][j] != 0) {
                B[k][0] = i;      // Row index
                B[k][1] = j;      // Column index
                B[k][2] = A[i][j]; // Non-zero value
                k++;
            }
        }
    }

    // Step 3: Store the total number of non-zero elements in the matrix
    B[0][2] = k - 1;
}

// Function to display the triplet matrix
void displayTriplet(int B[][3], int nonZeroCount) {
    printf("Row\tColumn\tValue\n");
    for (int i = 0; i <= nonZeroCount; i++) {
        printf("%d\t%d\t%d\n", B[i][0], B[i][1], B[i][2]);
    }
}

int main() {
    int m, n;
    int A[MAX][MAX], B[MAX][3]; // B[][3] to store triplet form

    // Input the size of the matrix
    printf("Enter the number of rows and columns of the matrix: ");
    scanf("%d %d", &m, &n);

    // Input the elements of the matrix
    printf("Enter the elements of the matrix:\n");
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &A[i][j]);
        }
    }

    // Convert the matrix to triplet form
    compact(A, m, n, B);

    // Display the triplet form
    printf("\nThe triplet form of the sparse matrix is:\n");
    displayTriplet(B, B[0][2]);

    return 0;
}
